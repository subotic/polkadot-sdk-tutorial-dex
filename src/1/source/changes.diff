diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..dfe0770
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,2 @@
+# Auto detect text files and perform LF normalization
+* text=auto
diff --git a/.gitignore b/.gitignore
index c301fad..fcb5e56 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,7 @@
 # Generated by Cargo
 # will have compiled files and executables
 **/target/
+**/output/
 # These are backup files generated by rustfmt
 **/*.rs.bk
 
diff --git a/Cargo.toml b/Cargo.toml
new file mode 100644
index 0000000..4c0ca3b
--- /dev/null
+++ b/Cargo.toml
@@ -0,0 +1,43 @@
+[package]
+name = "pallet-template"
+version = "4.0.0-dev"
+description = "FRAME pallet template for defining custom runtime logic."
+authors = ["Substrate DevHub <https://github.com/substrate-developer-hub>"]
+homepage = "https://substrate.io"
+edition = "2021"
+license = "MIT-0"
+publish = false
+repository = "https://github.com/substrate-developer-hub/substrate-node-template/"
+
+[package.metadata.docs.rs]
+targets = ["x86_64-unknown-linux-gnu"]
+
+[dependencies]
+codec = { package = "parity-scale-codec", version = "3.6.1", default-features = false, features = [
+	"derive",
+] }
+scale-info = { version = "2.5.0", default-features = false, features = ["derive"] }
+frame-benchmarking = { version = "4.0.0-dev", default-features = false, optional = true, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v1.0.0" }
+frame-support = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v1.0.0" }
+frame-system = { version = "4.0.0-dev", default-features = false, git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v1.0.0" }
+sp-runtime = { version = "24.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v1.0.0" }
+sp-std = { version = "14.0.0", default-features = false }
+
+[dev-dependencies]
+sp-core = { version = "21.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v1.0.0" }
+sp-io = { version = "23.0.0", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v1.0.0" }
+pallet-assets = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v1.0.0" }
+pallet-balances = { version = "4.0.0-dev", git = "https://github.com/paritytech/substrate.git", branch = "polkadot-v1.0.0" }
+
+[features]
+default = ["std"]
+std = [
+	"codec/std",
+	"frame-benchmarking?/std",
+	"frame-support/std",
+	"frame-system/std",
+	"scale-info/std",
+	"sp-runtime/std"
+]
+runtime-benchmarks = ["frame-benchmarking/runtime-benchmarks"]
+try-runtime = ["frame-support/try-runtime"]
diff --git a/src/lib.rs b/src/lib.rs
new file mode 100644
index 0000000..8932415
--- /dev/null
+++ b/src/lib.rs
@@ -0,0 +1,63 @@
+// We make sure this pallet uses `no_std` for compiling to Wasm.
+#![cfg_attr(not(feature = "std"), no_std)]
+
+// Re-export pallet items so that they can be accessed from the crate namespace.
+pub use pallet::*;
+
+// FRAME pallets require their own "mock runtimes" to be able to run unit tests. This module
+// contains a mock runtime specific for testing this pallet's functionality.
+#[cfg(test)]
+mod mock;
+
+// This module contains the unit tests for this pallet.
+#[cfg(test)]
+mod tests;
+
+// All pallet logic is defined in its own module and must be annotated by the `pallet` attribute.
+#[frame_support::pallet]
+pub mod pallet {
+    // Import various useful types required by all FRAME pallets.
+    use super::*;
+    use frame_support::pallet_prelude::*;
+    use frame_system::pallet_prelude::*;
+
+    // The `Pallet` struct serves as a placeholder to implement traits, methods and dispatchables
+    // (`Call`s) in this pallet.
+    #[pallet::pallet]
+    pub struct Pallet<T>(_);
+
+    /// The pallet's configuration trait.
+    #[pallet::config]
+    pub trait Config: frame_system::Config {
+        /// The overarching runtime event type.
+        type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
+    }
+
+    /// A storage item for this pallet.
+    #[pallet::storage]
+    pub type SomeItem<T> = StorageValue<_, u32>;
+
+    /// A storage map for this pallet.
+    #[pallet::storage]
+    pub type SomeMap<T> = StorageMap<_, Blake2_128Concat, u32, u32>;
+
+    /// Events that functions in this pallet can emit.
+    #[pallet::event]
+    #[pallet::generate_deposit(pub(super) fn deposit_event)]
+    pub enum Event<T: Config> {/* Pallet Event Variants Go Here */}
+
+    /// Errors that can be returned by this pallet.
+    #[pallet::error]
+    pub enum Error<T> {/* Pallet Error Variants Go Here */}
+
+    /// The pallet's dispatchable functions ([`Call`]s).
+    #[pallet::call]
+    impl<T: Config> Pallet<T> {
+        /* User Callable Functions Go Here */
+    }
+
+    /// The pallet's internal functions.
+    impl<T: Config> Pallet<T> {
+        /* Internally Callable Functions Go Here */
+    }
+}
diff --git a/src/mock.rs b/src/mock.rs
new file mode 100644
index 0000000..909ac97
--- /dev/null
+++ b/src/mock.rs
@@ -0,0 +1,103 @@
+use crate as pallet_dex;
+use frame_support::{
+    derive_impl,
+    traits::{AsEnsureOriginWithArg, ConstU128, ConstU16, ConstU32, ConstU64},
+};
+use frame_system::{EnsureRoot, EnsureSigned};
+use sp_core::H256;
+use sp_runtime::{
+    traits::{BlakeTwo256, IdentityLookup},
+    BuildStorage,
+};
+
+type Block = frame_system::mocking::MockBlock<Test>;
+pub type Balance = u128;
+
+// Configure a mock runtime to test the pallet.
+frame_support::construct_runtime!(
+    pub enum Test
+    {
+        System: frame_system,
+        Balances: pallet_balances,
+        Assets: pallet_assets,
+        Dex: pallet_dex,
+    }
+);
+
+#[derive_impl(frame_system::config_preludes::TestDefaultConfig as frame_system::DefaultConfig)]
+impl frame_system::Config for Test {
+    type BaseCallFilter = frame_support::traits::Everything;
+    type BlockWeights = ();
+    type BlockLength = ();
+    type DbWeight = ();
+    type RuntimeOrigin = RuntimeOrigin;
+    type RuntimeCall = RuntimeCall;
+    type Nonce = u64;
+    type Hash = H256;
+    type Hashing = BlakeTwo256;
+    type AccountId = u64;
+    type Lookup = IdentityLookup<Self::AccountId>;
+    type Block = Block;
+    type RuntimeEvent = RuntimeEvent;
+    type BlockHashCount = ConstU64<250>;
+    type Version = ();
+    type PalletInfo = PalletInfo;
+    type AccountData = pallet_balances::AccountData<Balance>;
+    type OnNewAccount = ();
+    type OnKilledAccount = ();
+    type SystemWeightInfo = ();
+    type SS58Prefix = ConstU16<42>;
+    type OnSetCode = ();
+    type MaxConsumers = ConstU32<16>;
+}
+
+impl pallet_balances::Config for Test {
+    type RuntimeEvent = RuntimeEvent;
+    type WeightInfo = ();
+    type Balance = Balance;
+    type DustRemoval = ();
+    type ExistentialDeposit = ConstU128<1>;
+    type AccountStore = System;
+    type ReserveIdentifier = [u8; 8];
+    type RuntimeHoldReason = ();
+    type FreezeIdentifier = ();
+    type MaxLocks = ConstU32<10>;
+    type MaxReserves = ();
+    type MaxHolds = ConstU32<10>;
+    type MaxFreezes = ConstU32<10>;
+}
+
+impl pallet_assets::Config for Test {
+    type RuntimeEvent = RuntimeEvent;
+    type Balance = Balance;
+    type RemoveItemsLimit = ConstU32<1000>;
+    type AssetId = u32;
+    type AssetIdParameter = codec::Compact<u32>;
+    type Currency = Balances;
+    type CreateOrigin = AsEnsureOriginWithArg<EnsureSigned<Self::AccountId>>;
+    type ForceOrigin = EnsureRoot<Self::AccountId>;
+    type AssetDeposit = ConstU128<100>;
+    type AssetAccountDeposit = ConstU128<1>;
+    type MetadataDepositBase = ConstU128<10>;
+    type MetadataDepositPerByte = ConstU128<1>;
+    type ApprovalDeposit = ConstU128<1>;
+    type StringLimit = ConstU32<50>;
+    type Freezer = ();
+    type Extra = ();
+    type CallbackHandle = ();
+    type WeightInfo = ();
+    #[cfg(feature = "runtime-benchmarks")]
+    type BenchmarkHelper = ();
+}
+
+impl pallet_dex::Config for Test {
+    type RuntimeEvent = RuntimeEvent;
+}
+
+// Build genesis storage according to the mock runtime.
+pub fn new_test_ext() -> sp_io::TestExternalities {
+    frame_system::GenesisConfig::<Test>::default()
+        .build_storage()
+        .unwrap()
+        .into()
+}
diff --git a/src/tests.rs b/src/tests.rs
new file mode 100644
index 0000000..294baa5
--- /dev/null
+++ b/src/tests.rs
@@ -0,0 +1,11 @@
+use crate::{mock::*, Error, Event};
+use frame_support::{assert_noop, assert_ok};
+
+#[test]
+fn basic_test() {
+    new_test_ext().execute_with(|| {
+        // Go past genesis block so events get deposited
+        System::set_block_number(1);
+        // Future test conditions would go here.
+    });
+}
