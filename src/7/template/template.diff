diff --git a/src/lib.rs b/src/lib.rs
index 05b71ba..4cf2e8e 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -5,7 +5,11 @@
 use frame_support::pallet_prelude::*;
 use frame_support::traits::fungible;
 use frame_support::traits::fungibles;
+use frame_support::PalletId;
 use pallet::*;
+use sp_runtime::traits::{
+    AccountIdConversion, CheckedDiv, CheckedMul, IntegerSquareRoot, Saturating, Zero,
+};
 
 // FRAME pallets require their own "mock runtimes" to be able to run unit tests. This module
 // contains a mock runtime specific for testing this pallet's functionality.
@@ -38,6 +42,8 @@ pub mod pallet {
     use super::*;
     use crate::liquidity_pool::LiquidityPool;
     use frame_support::pallet_prelude::*;
+    use frame_support::traits::fungibles::Mutate;
+    use frame_support::traits::tokens::Preservation;
     use frame_system::pallet_prelude::*;
 
     // The `Pallet` struct serves as a placeholder to implement traits, methods and dispatchables
@@ -63,6 +69,9 @@ pub mod pallet {
         type Fungibles: fungibles::Inspect<Self::AccountId, AssetId = u32>
             + fungibles::Mutate<Self::AccountId>
             + fungibles::Create<Self::AccountId>;
+
+        #[pallet::constant]
+        type PalletId: Get<PalletId>;
     }
 
     /// A storage map for storing liquidity pools
@@ -78,7 +87,24 @@ pub mod pallet {
     /// Events that functions in this pallet can emit.
     #[pallet::event]
     #[pallet::generate_deposit(pub(super) fn deposit_event)]
-    pub enum Event<T: Config> {/* Pallet Event Variants Go Here */}
+    pub enum Event<T: Config> {
+        /// Liquidity pool created.
+        /// Parameters:
+        /// - `T::AccountId`: The account ID of the liquidity provider who created the pool.
+        /// - `(T::AssetId, T::AssetId)`: The trading pair of the created liquidity pool.
+        LiquidityPoolCreated(AccountIdOf<T>, (AssetIdOf<T>, AssetIdOf<T>)),
+
+        /// Liquidity minted.
+        /// Parameters:
+        /// - `T::AccountId`: The account ID of the liquidity provider who minted the liquidity.
+        /// - `(T::AssetId, T::AssetId)`: The trading pair of the liquidity pool.
+        /// - `T::Balance`: The amount of liquidity tokens minted.
+        LiquidityMinted(
+            AccountIdOf<T>,
+            (AssetIdOf<T>, AssetIdOf<T>),
+            AssetBalanceOf<T>,
+        ),
+    }
 
     /// Errors that can be returned by this pallet.
     #[pallet::error]
@@ -109,16 +135,187 @@ pub mod pallet {
 
         /// Attempted to divide by zero
         DivisionByZero,
+
+        /// The liquidity pool for the specified trading pair already exists.
+        LiquidityPoolAlreadyExists,
+
+        /// The liquidity pool with the provided asset pair not found
+        LiquidityPoolNotFound,
+
+        /// Minted is not greater than or equal to the minimum liquidity specified
+        InsufficientLiquidityMinted,
     }
 
     /// The pallet's dispatchable functions ([`Call`]s).
     #[pallet::call]
     impl<T: Config> Pallet<T> {
-        /* User Callable Functions Go Here */
+        // Dispatchable call to create a new liquidity pool
+        #[pallet::call_index(0)]
+        #[pallet::weight(Weight::default())]
+        pub fn create_liquidity_pool(
+            origin: OriginFor<T>,
+            asset_a: AssetIdOf<T>,
+            asset_b: AssetIdOf<T>,
+            liquidity_token: AssetIdOf<T>,
+        ) -> DispatchResult {
+            // ensure that the origin has been signed
+            let sender = ensure_signed(origin)?;
+
+            let trading_pair = (asset_a, asset_b);
+            ensure!(
+                !LiquidityPools::<T>::contains_key(trading_pair),
+                Error::<T>::LiquidityPoolAlreadyExists
+            );
+
+            // Create a new liquidity pool
+            let liquidity_pool = LiquidityPool {
+                assets: trading_pair,
+                reserves: (Zero::zero(), Zero::zero()),
+                total_liquidity: Zero::zero(),
+                liquidity_token,
+            };
+
+            // Insert the new liquidity pool into the storage
+            LiquidityPools::<T>::insert(trading_pair, liquidity_pool);
+
+            // Log an event indicating that the pool was created
+            Self::deposit_event(Event::LiquidityPoolCreated(sender, trading_pair));
+
+            Ok(())
+        }
+
+        #[pallet::call_index(1)]
+        #[pallet::weight(Weight::default())]
+        pub fn mint_liquidity(
+            origin: OriginFor<T>,
+            asset_a: AssetIdOf<T>,
+            asset_b: AssetIdOf<T>,
+            amount_a: AssetBalanceOf<T>,
+            amount_b: AssetBalanceOf<T>,
+            min_liquidity: AssetBalanceOf<T>,
+        ) -> DispatchResult {
+            let sender = ensure_signed(origin)?;
+
+            let trading_pair = (asset_a, asset_b);
+
+            // Get the liquidity pool from storage
+            let mut liquidity_pool =
+                LiquidityPools::<T>::get(&trading_pair).ok_or(Error::<T>::LiquidityPoolNotFound)?;
+
+            // Calculate the liquidity minted based on the provided amounts and the current reserves
+            let liquidity_minted = Self::calculate_liquidity_minted(
+                (amount_a, amount_b),
+                (liquidity_pool.reserves.0, liquidity_pool.reserves.1),
+                liquidity_pool.total_liquidity,
+            )?;
+
+            // Ensure that the liquidity minted is greater than or equal to the minimum liquidity specified
+            ensure!(
+                liquidity_minted >= min_liquidity,
+                Error::<T>::InsufficientLiquidityMinted
+            );
+
+            // Transfer the assets from the sender to the liquidity pool
+            Self::transfer_asset_to_pool(&sender, trading_pair.0, amount_a)?;
+            Self::transfer_asset_to_pool(&sender, trading_pair.1, amount_b)?;
+
+            // Mint liquidity tokens to the sender
+            Self::mint_liquidity_tokens(&sender, liquidity_pool.liquidity_token, liquidity_minted)?;
+
+            // Update the liquidity pool reserves and total liquidity using the `mint` method
+            liquidity_pool.mint((amount_a, amount_b), liquidity_minted)?;
+
+            // Update the liquidity pool in storage
+            LiquidityPools::<T>::insert(&trading_pair, liquidity_pool);
+
+            // Emit the LiquidityMinted event
+            Self::deposit_event(Event::LiquidityMinted(
+                sender,
+                trading_pair,
+                liquidity_minted,
+            ));
+
+            Ok(())
+        }
     }
 
     /// The pallet's internal functions.
     impl<T: Config> Pallet<T> {
-        /* Internally Callable Functions Go Here */
+        fn calculate_liquidity_minted(
+            amounts: (AssetBalanceOf<T>, AssetBalanceOf<T>),
+            reserves: (AssetBalanceOf<T>, AssetBalanceOf<T>),
+            total_liquidity: AssetBalanceOf<T>,
+        ) -> Result<AssetBalanceOf<T>, DispatchError> {
+            let (amount_a, amount_b) = amounts;
+            let (reserve_a, reserve_b) = reserves;
+
+            ensure!(
+                !amount_a.is_zero() && !amount_b.is_zero(),
+                Error::<T>::InsufficientLiquidityMinted
+            );
+
+            if total_liquidity.is_zero() {
+                // If the liquidity pool is empty, the minted liquidity is the geometric mean of the amounts
+                let liquidity_minted = Self::geometric_mean(amount_a, amount_b)?;
+                Ok(liquidity_minted)
+            } else {
+                // If the liquidity pool is not empty, calculate the minted liquidity proportionally
+                let liquidity_minted_a = amount_a
+                    .checked_mul(&total_liquidity)
+                    .ok_or(Error::<T>::ArithmeticOverflow)?
+                    .checked_div(&reserve_a)
+                    .ok_or(Error::<T>::DivisionByZero)?;
+
+                let liquidity_minted_b = amount_b
+                    .checked_mul(&total_liquidity)
+                    .ok_or(Error::<T>::ArithmeticOverflow)?
+                    .checked_div(&reserve_b)
+                    .ok_or(Error::<T>::DivisionByZero)?;
+
+                // Choose the smaller minted liquidity to maintain the desired asset ratio
+                let liquidity_minted = sp_std::cmp::min(liquidity_minted_a, liquidity_minted_b);
+                Ok(liquidity_minted)
+            }
+        }
+
+        fn geometric_mean(
+            amount_a: AssetBalanceOf<T>,
+            amount_b: AssetBalanceOf<T>,
+        ) -> Result<AssetBalanceOf<T>, DispatchError> {
+            let sqrt_product = (amount_a
+                .checked_mul(&amount_b)
+                .ok_or(Error::<T>::ArithmeticOverflow)?)
+            .integer_sqrt();
+            Ok(sqrt_product)
+        }
+
+        fn transfer_asset_to_pool(
+            sender: &AccountIdOf<T>,
+            asset_id: AssetIdOf<T>,
+            amount: AssetBalanceOf<T>,
+        ) -> DispatchResult {
+            let pool_account_id = T::PalletId::get().into_account_truncating();
+
+            // Transfer the asset from the sender to the pool account
+            T::Fungibles::transfer(
+                asset_id,
+                sender,
+                &pool_account_id,
+                amount,
+                Preservation::Expendable,
+            )?;
+
+            Ok(())
+        }
+
+        fn mint_liquidity_tokens(
+            recipient: &AccountIdOf<T>,
+            liquidity_token_id: AssetIdOf<T>,
+            amount: AssetBalanceOf<T>,
+        ) -> DispatchResult {
+            // Mint the liquidity tokens to the recipient
+            T::Fungibles::mint_into(liquidity_token_id, recipient, amount)?;
+            Ok(())
+        }
     }
 }
diff --git a/src/liquidity_pool.rs b/src/liquidity_pool.rs
index 51d8886..2052f5a 100644
--- a/src/liquidity_pool.rs
+++ b/src/liquidity_pool.rs
@@ -1,7 +1,7 @@
 use super::*;
 use frame_support::pallet_prelude::*;
 use sp_runtime::traits::{
-    CheckedAdd, CheckedDiv, CheckedMul, CheckedSub, SaturatedConversion, Saturating, Zero,
+    CheckedAdd, CheckedDiv, CheckedMul, CheckedSub, SaturatedConversion, Zero,
 };
 use sp_runtime::Permill;
 
@@ -12,7 +12,6 @@ pub struct LiquidityPool<T: Config> {
     pub reserves: (AssetBalanceOf<T>, AssetBalanceOf<T>),
     pub total_liquidity: AssetBalanceOf<T>,
     pub liquidity_token: AssetIdOf<T>,
-    _marker: PhantomData<T>,
 }
 
 impl<T: Config> LiquidityPool<T> {
diff --git a/src/mock.rs b/src/mock.rs
index 70ec90d..9c3c45d 100644
--- a/src/mock.rs
+++ b/src/mock.rs
@@ -1,7 +1,8 @@
 use crate as pallet_dex;
 use frame_support::{
-    derive_impl,
+    derive_impl, parameter_types,
     traits::{AsEnsureOriginWithArg, ConstU128, ConstU16, ConstU32, ConstU64},
+    PalletId,
 };
 use frame_system::{EnsureRoot, EnsureSigned};
 use sp_core::H256;
@@ -10,6 +11,10 @@ use sp_runtime::{
     BuildStorage,
 };
 
+parameter_types! {
+    pub const DexPallet: PalletId = PalletId(*b"POLKADEX");
+}
+
 type Block = frame_system::mocking::MockBlock<Test>;
 pub type Balance = u128;
 
@@ -94,6 +99,7 @@ impl pallet_dex::Config for Test {
     type RuntimeEvent = RuntimeEvent;
     type NativeBalance = Balances;
     type Fungibles = Assets;
+    type PalletId = DexPallet;
 }
 
 // Build genesis storage according to the mock runtime.
